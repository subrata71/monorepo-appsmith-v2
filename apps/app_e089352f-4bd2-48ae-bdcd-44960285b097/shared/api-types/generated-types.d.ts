/**
 * ⚠️  AUTO-GENERATED FILE - DO NOT MODIFY ⚠️
 *
 * This file is automatically generated from OpenAPI specifications.
 *
 * To regenerate this file after updating OpenAPI specs:
 * 1. Update your OpenAPI specification files in open-api-specs/
 * 2. Run: cd shared && pnpm generate-types
 *
 * This ensures type safety between your API contracts and TypeScript code.
 */

export interface paths {
  '/__entityPlural__': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List all entities
     * @description Retrieve a list of all entities
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of entities retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data: components['schemas']['__Entity__'][];
            };
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ApiErrorResponse'];
          };
        };
      };
    };
    put?: never;
    /**
     * Create a new entity
     * @description Create a new entity with the provided data
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['New__Entity__'];
        };
      };
      responses: {
        /** @description Entity created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data: components['schemas']['__Entity__'];
            };
          };
        };
        /** @description Bad request - invalid data */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ApiErrorResponse'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ApiErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/__entityPlural__/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The entity ID */
        id: string;
      };
      cookie?: never;
    };
    /**
     * Get entity by ID
     * @description Retrieve a specific entity by its ID
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The entity ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Entity retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data: components['schemas']['__Entity__'];
            };
          };
        };
        /** @description Entity not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ApiErrorResponse'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ApiErrorResponse'];
          };
        };
      };
    };
    /**
     * Update entity
     * @description Update an existing entity with the provided data
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The entity ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            name?: string;
          };
        };
      };
      responses: {
        /** @description Entity updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data: components['schemas']['__Entity__'];
            };
          };
        };
        /** @description Bad request - invalid data */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ApiErrorResponse'];
          };
        };
        /** @description Entity not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ApiErrorResponse'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ApiErrorResponse'];
          };
        };
      };
    };
    post?: never;
    /**
     * Delete entity
     * @description Delete an entity by its ID
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The entity ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Entity deleted successfully */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Entity not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ApiErrorResponse'];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ApiErrorResponse'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    ApiErrorResponse: {
      error: {
        message: string;
        code?: string;
        details?: Record<string, never>;
      };
    };
    __Entity__: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: date-time */
      createdAt: string;
    };
    New__Entity__: {
      name: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
