metadata:
  description: Comprehensive technical specification combining all individual module
    specifications
  generated_from_files:
  - tech_spec_0.yaml
  - tech_spec_1.yaml
  - tech_spec_2.yaml
  title: Combined Technical Specification
  total_modules: 3
modules:
- module_name: '0'
  source_file: tech_spec_0.yaml
  specification:
    client:
      components:
        atoms:
        - description: Minimalist flat button with accent color and rounded corners.
          name: Button
          props:
          - label
          - onClick
          - disabled
        - description: Minimalist text/number input field with subtle border and rounded
            corners.
          name: Input
          props:
          - value
          - onChange
          - placeholder
          - type
          - error
        - description: Plain text element for labels and status messages.
          name: Text
          props:
          - children
          - color
        molecules:
        - atoms:
          - Input
          - Button
          description: Group of input and button for an operation (e.g., insert, delete,
            search).
          name: OperationControl
          props:
          - inputProps
          - buttonProps
        - atoms:
          - Text
          description: Displays contextual feedback or errors to the user.
          name: StatusMessage
          props:
          - message
          - type
        organisms:
        - atoms:
          - Text
          description: Top bar with centered application name.
          molecules: []
          name: AppHeader
          props: []
        - atoms:
          - Button
          description: Panel with all BST operation controls (insert, delete, search,
            reset).
          molecules:
          - OperationControl
          name: BSTControlsPanel
          props: []
        - atoms: []
          description: SVG-based visualization of the BST with animated transitions
            for nodes and edges.
          molecules: []
          name: BSTSVGTree
          props:
          - bst
          - highlightedNodes
          - searchPath
          - animationState
        - atoms:
          - Text
          description: Bottom info area showing operation feedback and errors.
          molecules:
          - StatusMessage
          name: StatusBar
          props:
          - message
          - type
      pages:
      - description: The single interactive interface for visualizing and manipulating
          the BST.
        organisms:
        - AppHeader
        - BSTControlsPanel
        - BSTSVGTree
        - StatusBar
        queries:
        - getBST
        - insertBSTNode
        - deleteBSTNode
        - searchBSTNode
        - resetBST
        route: /
        title: BST Visualizer
      stores:
      - actions:
        - 'insertNode(value: integer)'
        - 'deleteNode(value: integer)'
        - 'searchNode(value: integer)'
        - resetTree()
        - 'setStatusMessage(message: string, type: string)'
        - 'setSearchPath(path: string[])'
        - 'setAnimationState(state: object)'
        description: Holds the current BST structure, selected/active node ids, search
          paths, and animation state.
        name: bstStore
        state_shape:
        - name: bst
          type: BST
        - name: selectedNodeId
          type: string | null
        - name: searchPath
          type: string[]
        - name: statusMessage
          type: string
        - name: statusType
          type: info | error | success
        - name: animationState
          type: object
    domains:
    - apis:
      - description: Retrieve the current state of the BST including all nodes and
          their layout.
        input: none
        method: query
        name: getBST
        output: BST
        path: getBST
      - description: Retrieve a specific node in the BST by its id.
        input: '{id: string}'
        method: query
        name: getBSTNodeById
        output: BSTNode
        path: getBSTNodeById
      - description: Insert a new node with the given value into the BST and return
          the updated BST.
        input: '{value: integer}'
        method: mutation
        name: insertBSTNode
        output: BST
        path: insertBSTNode
      - description: Delete the node with the specified value from the BST and return
          the updated BST.
        input: '{value: integer}'
        method: mutation
        name: deleteBSTNode
        output: BST
        path: deleteBSTNode
      - description: Search for a node with the given value and return the search
          path and found status.
        input: '{value: integer}'
        method: query
        name: searchBSTNode
        output: '{found: boolean, path: string[]}'
        path: searchBSTNode
      - description: Reset the entire BST to an empty state.
        input: none
        method: mutation
        name: resetBST
        output: BST
        path: resetBST
      description: Domain for managing the Binary Search Tree structure, its nodes,
        and all related operations (insert, delete, search, reset) in client-side
        state.
      models:
      - description: A single node in the binary search tree.
        fields:
        - name: id
          nullable: false
          pk: true
          type: string
        - name: value
          nullable: false
          pk: false
          type: integer
        - name: left
          nullable: true
          pk: false
          type: BSTNode | null
        - name: right
          nullable: true
          pk: false
          type: BSTNode | null
        - name: createdAt
          nullable: false
          pk: false
          type: Date
        - name: updatedAt
          nullable: false
          pk: false
          type: Date
        name: BSTNode
      - description: Represents the entire binary search tree.
        fields:
        - name: id
          nullable: false
          pk: true
          type: string
        - name: root
          nullable: true
          pk: false
          type: BSTNode | null
        - name: createdAt
          nullable: false
          pk: false
          type: Date
        - name: updatedAt
          nullable: false
          pk: false
          type: Date
        name: BST
      name: bst
      services:
      - description: Handles all BST operations (insert, delete, search, reset, layout
          calculation, animation triggers).
        methods:
        - 'insertNode(value: integer)'
        - 'deleteNode(value: integer)'
        - 'searchNode(value: integer)'
        - reset()
        - calculateLayout()
        - 'triggerAnimation(type: string, data?: any)'
        name: BSTService
    metadata:
      description: A static, client-side web application for visualizing and interacting
        with a Binary Search Tree (BST) through insertion, deletion, and search operations.
        The app features an intuitive, minimalist UI with smooth animations and real-time
        feedback, all managed in-browser.
      generated_at: '2024-06-12T15:13:00Z'
      name: Minimalist BST Visualizer
      version: 1.0.0
    product:
      features:
      - description: SVG-based tree rendering with animated transitions for all operations.
        domains:
        - bst
        id: bst_visualization
        priority: high
        title: Real-time BST Visualization
      - description: Input fields and buttons for inserting, deleting, searching,
          and resetting BST nodes.
        domains:
        - bst
        id: interactive_controls
        priority: high
        title: Minimalist Interactive Controls
      - description: Ensures only valid integers can be entered for BST operations,
          with subtle error feedback.
        domains:
        - bst
        id: input_validation
        priority: high
        title: Robust Input Validation
      - description: Animated highlights and transitions for insert, delete, and search
          actions, with status messages.
        domains:
        - bst
        id: operation_feedback
        priority: medium
        title: Animated Operation Feedback
      - description: Layout and SVG visualization automatically adapt to screen size
          and tree depth.
        domains:
        - bst
        id: responsive_design
        priority: medium
        title: Responsive Design
      goals:
      - Enable users to visually understand BST operations (insert, delete, search)
        interactively
      - Provide immediate, animated feedback for all tree operations
      - Maintain a minimal, distraction-free user interface
      - Ensure the app is fully client-side with no backend dependencies
      - Guarantee robust input validation for user actions
      personas:
      - description: Learns about data structures and algorithms, uses the visualizer
          to understand BST behavior.
        goals:
        - Experiment with BST operations to see their effects
        - Receive instant feedback and visual explanations
        name: Student
      - description: Uses the tool during teaching or demonstration sessions to illustrate
          BST concepts.
        goals:
        - Demonstrate BST operations live in class
        - Highlight specific tree states and transitions
        name: Educator
      - description: Reviews or recalls BST algorithms, uses the visualizer for reference
          or quick testing.
        goals:
        - Quickly test and visualize BST logic
        - Reset and manipulate trees interactively
        name: Developer
      summary: A web-based BST visualizer that allows users to insert, delete, search,
        and reset nodes in a binary search tree with real-time, animated SVG visualizations
        and a clean, responsive interface. All logic and state are handled client-side
        for a seamless, interactive experience.
    use_cases:
    - actors:
      - User
      apis:
      - insertBSTNode
      description: User enters a number and clicks "Insert" to add a node to the BST.
        The tree updates visually with an animated insertion.
      domains:
      - bst
      happy_path:
      - Enter a valid integer in the input field
      - Click the "Insert" button
      - The BST animates the insertion and updates the visualization
      - Status bar displays success or error message
      id: insert_node
      pages:
      - /
      postconditions:
      - BST contains the new node if input is valid
      preconditions:
      - BST is initialized (may be empty)
      title: Insert Node into BST
    - actors:
      - User
      apis:
      - deleteBSTNode
      description: User selects a node value to delete; the BST updates visually with
        a deletion animation.
      domains:
      - bst
      happy_path:
      - Enter the node value to delete
      - Click the "Delete" button
      - The node is visually removed with an animation
      - Status bar displays feedback
      id: delete_node
      pages:
      - /
      postconditions:
      - BST no longer contains the deleted node
      preconditions:
      - BST contains at least one node
      title: Delete Node from BST
    - actors:
      - User
      apis:
      - searchBSTNode
      description: User enters a value to search; the BST highlights the search path
        and target node if found.
      domains:
      - bst
      happy_path:
      - Enter the value to search for
      - Click the "Search" button
      - The tree highlights the path to the searched node and the node itself if found
      - Status bar displays the result
      id: search_node
      pages:
      - /
      postconditions:
      - Path is highlighted, user sees result
      preconditions:
      - BST contains at least one node
      title: Search for Node in BST
    - actors:
      - User
      apis:
      - resetBST
      description: User clicks "Reset" to clear the entire tree and visualization.
      domains:
      - bst
      happy_path:
      - Click the "Reset" button
      - The tree and visualization are cleared
      - Status bar displays confirmation
      id: reset_tree
      pages:
      - /
      postconditions:
      - BST is empty
      preconditions:
      - BST may have nodes
      title: Reset BST
    user_journeys:
    - id: basic_insertion
      persona: Student
      related_use_cases:
      - insert_node
      steps:
      - action: Enter a number in the insert input
        page: /
      - action: Click "Insert" and watch the node animate into place
        page: /
      - action: Repeat for more numbers, observing the BST shape change
        page: /
      - action: Read operation feedback in the status bar
        page: /
      success_criteria: All valid insertions update the BST and visualization with
        appropriate feedback.
      title: Basic Node Insertion Flow
    - id: error_handling
      persona: User
      related_use_cases:
      - insert_node
      steps:
      - action: Enter an invalid value (e.g., text or existing node value)
        page: /
      - action: Attempt to insert; error feedback is shown in the status bar and input
          is highlighted
        page: /
      - action: Enter a valid value and successfully insert
        page: /
      success_criteria: Errors are clearly communicated, and user can recover by providing
        valid input.
      title: Input Validation and Error Flow
    - id: search_and_highlight
      persona: User
      related_use_cases:
      - search_node
      steps:
      - action: Enter an existing node value
        page: /
      - action: Click "Search"
        page: /
      - action: Path from root to target is highlighted; target node flashes green
          if found
        page: /
      - action: Status bar displays success
        page: /
      - action: Enter a missing value, click "Search"; path is highlighted, error
          is shown if not found
        page: /
      success_criteria: Search results and paths are highlighted with animation and
        clear feedback.
      title: Search and Highlight Path
- module_name: '1'
  source_file: tech_spec_1.yaml
  specification:
    client:
      components:
        atoms:
        - description: Minimalist flat button with accent color and subtle transitions.
          name: Button
          props:
          - label
          - onClick
          - disabled
          - type
        - description: Rounded numeric input field with validation feedback.
          name: Input
          props:
          - value
          - onChange
          - placeholder
          - error
        - description: For labels, instructions, and status messages.
          name: Text
          props:
          - children
          - type
        - description: Inline tooltip for controls.
          name: Tooltip
          props:
          - content
          - children
        molecules:
        - atoms:
          - Button
          - Input
          - Tooltip
          description: Row of input and action buttons (Insert, Delete, Search, Reset),
            arranged horizontally.
          name: BSTControlGroup
          props:
          - onInsert
          - onDelete
          - onSearch
          - onReset
          - inputValues
          - inputErrors
        - atoms:
          - Text
          description: SVG circle representing a BST node, with value and highlight
            states.
          name: BSTNodeCircle
          props:
          - value
          - highlight
          - x
          - y
          - onTransition
        - atoms: []
          description: SVG straight line connecting parent and child nodes.
          name: BSTEdgeLine
          props:
          - fromX
          - fromY
          - toX
          - toY
        - atoms:
          - Text
          description: Fade-out message component for feedback/errors.
          name: StatusMessage
          props:
          - message
          - type
        organisms:
        - atoms: []
          description: Complete SVG tree visualization, auto-laying out nodes and
            animating their states.
          molecules:
          - BSTNodeCircle
          - BSTEdgeLine
          name: BSTVisualization
          props:
          - bst
          - animationState
        - atoms: []
          description: Container grouping all control molecules (inputs and buttons)
            for operations.
          molecules:
          - BSTControlGroup
          name: BSTControlsPanel
          props:
          - inputValues
          - inputErrors
          - onInsert
          - onDelete
          - onSearch
          - onReset
        - atoms:
          - Text
          description: Top bar with app title.
          molecules: []
          name: HeaderBar
          props:
          - title
        - atoms: []
          description: Status message display below visualization.
          molecules:
          - StatusMessage
          name: StatusBar
          props:
          - statusMessage
          - statusType
      pages:
      - description: Single-page interface for visualizing and interacting with the
          BST.
        organisms:
        - HeaderBar
        - BSTControlsPanel
        - BSTVisualization
        - StatusBar
        queries:
        - getBST
        - insertBSTNode
        - deleteBSTNode
        - searchBSTNode
        - resetBST
        route: /
        title: BST Visualizer
      stores:
      - actions:
        - 'insertNode(value: integer)'
        - 'deleteNode(value: integer)'
        - 'searchNode(value: integer)'
        - reset()
        - 'setInputValue(field: string, value: string)'
        - 'setInputError(field: string, error: string)'
        - 'setStatusMessage(message: string, type: string)'
        description: State management for current BST structure, animation state,
          selected nodes, and operation feedback messages.
        name: bstStore
        state_shape:
        - name: bst
          type: BST
        - name: animationState
          type: object
        - name: statusMessage
          type: string
        - name: statusType
          type: string
        - name: inputValues
          type: object
        - name: inputErrors
          type: object
    domains:
    - apis:
      - description: Retrieve the current BST structure.
        input: none
        method: get
        name: getBST
        output: BST
        path: /api/bst
      - description: Insert a node with a given value into the BST.
        input: '{ value: integer }'
        method: post
        name: insertBSTNode
        output: BST
        path: /api/bst/insert
      - description: Delete a node with a specific value from the BST.
        input: '{ value: integer }'
        method: post
        name: deleteBSTNode
        output: BST
        path: /api/bst/delete
      - description: Search for a node by value, returning traversal path and found
          status.
        input: '{ value: integer }'
        method: post
        name: searchBSTNode
        output: '{ found: boolean, path: string[] }'
        path: /api/bst/search
      - description: Remove all nodes, returning an empty BST.
        input: none
        method: post
        name: resetBST
        output: BST
        path: /api/bst/reset
      description: Binary Search Tree domain representing the structure, nodes, and
        supported operations.
      models:
      - description: Node in the binary search tree.
        fields:
        - name: id
          nullable: false
          pk: true
          type: string
        - name: value
          nullable: false
          pk: false
          type: integer
        - name: left
          nullable: true
          pk: false
          type: BSTNode | null
        - name: right
          nullable: true
          pk: false
          type: BSTNode | null
        name: BSTNode
      - description: The entire binary search tree structure.
        fields:
        - name: id
          nullable: false
          pk: true
          type: string
        - name: root
          nullable: true
          pk: false
          type: BSTNode | null
        name: BST
      name: bst
      services:
      - description: Contains core logic for BST insert, delete, search, and reset.
          Handles node validation, updates, and triggers visualization state changes.
        methods:
        - 'insertNode(value: integer): void'
        - 'deleteNode(value: integer): void'
        - 'searchNode(value: integer): {found: boolean, path: string[]}'
        - 'reset(): void'
        name: bstOperationService
      - description: Calculates SVG layout positions for nodes and edges based on
          tree structure and viewport size.
        methods:
        - 'layoutTree(): LayoutInfo'
        name: bstLayoutService
      - description: Manages animation states for adding, removing, and highlighting
          nodes during operations.
        methods:
        - 'animateInsert(id: string): void'
        - 'animateDelete(id: string): void'
        - 'animateSearch(path: string[]): void'
        name: bstAnimationService
    metadata:
      description: A client-side web application that visually demonstrates binary
        search tree (BST) operations—insert, delete, and search—using a minimalist,
        interactive SVG-based interface. All state and logic reside in-browser, with
        a focus on simplicity, clarity, and real-time animated feedback.
      generated_at: '2024-06-08T16:00:00Z'
      name: Minimalist BST Visualizer
      version: 1.0.0
    product:
      features:
      - description: Add a numeric value to the BST with animated placement and validation.
        domains:
        - bst
        id: bst_insert
        priority: high
        title: Insert Node
      - description: Remove a node by value, with animated fading and tree rearrangement.
        domains:
        - bst
        id: bst_delete
        priority: high
        title: Delete Node
      - description: Highlight search path and found node, with animated traversal.
        domains:
        - bst
        id: bst_search
        priority: high
        title: Search Node
      - description: Clear the tree, removing all nodes and returning to the initial
          state.
        domains:
        - bst
        id: bst_reset
        priority: medium
        title: Reset Tree
      - description: Status bar displays operation results, errors, or instructions,
          fading out after a few seconds.
        domains:
        - bst
        id: live_status
        priority: medium
        title: Live Status Feedback
      goals:
      - Provide an intuitive, real-time visualization of binary search tree operations
        (insert, delete, search).
      - Emphasize simplicity, interactivity, and minimalism in both UI and UX.
      - Ensure the application is fully client-side with no backend dependencies.
      - Deliver smooth, non-distracting animations for tree updates and operations.
      - Enable responsive, accessible interaction on all modern browsers and devices.
      personas:
      - description: Learns and experiments with data structures, using the app to
          visualize BST algorithms.
        goals:
        - Understand BST insert, delete, and search operations.
        - See real-time visual feedback for each operation.
        - Experiment with custom data inputs.
        name: Computer Science Student
      - description: Teaches data structures, using the app as a classroom demonstration
          tool.
        goals:
        - Demonstrate BST behavior live.
        - Show, step-by-step, how the tree updates in response to user actions.
        - Highlight correct and incorrect operations clearly.
        name: Educator
      - description: Explores algorithms independently, using the tool to reinforce
          understanding.
        goals:
        - Interactively test BST concepts.
        - Receive instant feedback and error messages for invalid actions.
        - Experience an uncluttered, distraction-free interface.
        name: Self-learner
      summary: Minimalist, interactive BST visualizer running entirely in the browser.
        Empowers users to intuitively insert, delete, search, and reset nodes on a
        binary search tree with immediate, animated feedback and a clean, accessible
        design.
    use_cases:
    - actors:
      - User
      apis:
      - insertBSTNode
      description: User enters a number and clicks 'Insert' to add a node to the BST.
        The visualization updates to show the new node in the correct position, with
        a smooth animation.
      domains:
      - bst
      happy_path:
      - User types a valid integer in the insert field.
      - User clicks 'Insert' or presses Enter.
      - App validates input and adds the node if not present.
      - Tree visualization animates the new node appearing.
      - Status bar displays 'Node inserted'.
      id: insert_node
      pages:
      - /
      postconditions:
      - Node is present in the BST.
      preconditions:
      - BST visualizer is loaded.
      title: Insert a Node
    - actors:
      - User
      apis:
      - deleteBSTNode
      description: User enters a value and clicks 'Delete' to remove a node from the
        BST. If the node exists, it fades out and the tree adjusts; otherwise, an
        error message is shown.
      domains:
      - bst
      happy_path:
      - User types a valid integer in the delete field.
      - User clicks 'Delete' or presses Enter.
      - App validates input and checks if the node exists.
      - If found, node fades and tree is rearranged.
      - Status bar shows 'Node deleted'.
      - If not found, status bar shows 'Node not found for deletion'.
      id: delete_node
      pages:
      - /
      postconditions:
      - Node is removed if present.
      preconditions:
      - BST contains at least one node.
      title: Delete a Node
    - actors:
      - User
      apis:
      - searchBSTNode
      description: User enters a value and clicks 'Search' to find a node in the BST.
        The search path is highlighted, and the found node is marked.
      domains:
      - bst
      happy_path:
      - User types a valid integer in the search field.
      - User clicks 'Search' or presses Enter.
      - App animates traversal, highlighting each node along the search path.
      - If found, node is highlighted green; if not, status bar shows 'Node not found'.
      id: search_node
      pages:
      - /
      postconditions:
      - Node is highlighted if found.
      preconditions:
      - BST contains at least one node.
      title: Search for a Node
    - actors:
      - User
      apis:
      - resetBST
      description: User clicks 'Reset' to clear the BST and return to an empty state.
      domains:
      - bst
      happy_path:
      - User clicks 'Reset'.
      - App clears all nodes from the tree.
      - Visualization updates to empty.
      - Status bar shows 'Tree reset'.
      id: reset_tree
      pages:
      - /
      postconditions:
      - BST is empty.
      preconditions:
      - BST visualizer is loaded.
      title: Reset Tree
    user_journeys:
    - id: student_experiment
      persona: Computer Science Student
      related_use_cases:
      - insert_node
      - delete_node
      - search_node
      - reset_tree
      steps:
      - action: Open the BST Visualizer.
        page: /
      - action: Insert several numbers via the insert field.
        page: /
      - action: Delete one value and observe the animation.
        page: /
      - action: Search for various values.
        page: /
      - action: Reset the tree to start over.
        page: /
      success_criteria: User successfully inserts, deletes, searches, and resets nodes,
        observing correct visual feedback for each operation.
      title: Student Experiments with BST Operations
    - id: educator_demo
      persona: Educator
      related_use_cases:
      - insert_node
      - delete_node
      - search_node
      - reset_tree
      steps:
      - action: Open the application on a large screen.
        page: /
      - action: Insert nodes to build a tree.
        page: /
      - action: Delete and search for nodes, narrating the transitions.
        page: /
      - action: Reset the tree for different scenarios.
        page: /
      success_criteria: Educator demonstrates all main BST operations with clear,
        live visual feedback.
      title: Educator Demonstrates BST Concepts
- module_name: '2'
  source_file: tech_spec_2.yaml
  specification:
    client:
      components:
        atoms:
        - description: Flat, minimalist button for all controls.
          name: Button
          props:
          - onClick
          - disabled
          - children
          - type
        - description: Minimalist numeric input field with subtle border and rounded
            corners.
          name: Input
          props:
          - value
          - onChange
          - type
          - placeholder
        - description: Used for labels, node values, and status messages.
          name: Text
          props:
          - children
          - variant
        - description: Display helper text or validation feedback on hover.
          name: Tooltip
          props:
          - content
          - children
        - description: SVG icon for optional use in controls or feedback.
          name: Icon
          props:
          - name
        molecules:
        - atoms:
          - Input
          - Button
          - Tooltip
          description: Groups and aligns input fields and buttons for the control
            panel.
          name: ControlGroup
          props:
          - children
        - atoms:
          - Text
          description: Displays a feedback message below the visualization, fading
            out after a few seconds.
          name: StatusMessage
          props:
          - message
          - type
        - atoms:
          - Text
          description: Renders a single BST node as an SVG circle with a value; supports
            highlight and animation.
          name: TreeNode
          props:
          - value
          - highlight
          - position
          - onClick
        - atoms: []
          description: Renders an SVG line connecting two nodes.
          name: TreeEdge
          props:
          - from
          - to
        - atoms:
          - Input
          - Button
          description: Numeric input with integrated search button and validation.
          name: SearchInput
          props:
          - value
          - onChange
          - onSearch
        organisms:
        - atoms:
          - Button
          description: Horizontal row of input fields and buttons for controlling
            BST operations (insert, delete, search, reset), with validation and tooltips.
          molecules:
          - ControlGroup
          - SearchInput
          name: BSTControlPanel
          props: []
        - atoms: []
          description: Central SVG area rendering the current BST structure, including
            nodes and edges. Handles auto-layout and animation.
          molecules:
          - TreeNode
          - TreeEdge
          name: BSTVisualization
          props:
          - bstState
        - atoms:
          - Text
          description: Displays the latest status message or feedback below the tree
            visualization, using muted or accent colors as appropriate.
          molecules:
          - StatusMessage
          name: BSTStatusBar
          props:
          - message
          - type
      pages:
      - description: The primary interface for interacting with and visualizing the
          BST, containing all controls and real-time SVG visualization.
        organisms:
        - BSTControlPanel
        - BSTVisualization
        - BSTStatusBar
        queries:
        - getBSTState
        - searchBSTNode
        route: /
        title: BST Visualizer
      stores:
      - actions:
        - 'insertNode(value: integer)'
        - 'deleteNode(value: integer)'
        - 'searchNode(value: integer)'
        - resetTree()
        - 'setStatus(message: string)'
        description: Manages the current state of the BST, including nodes, root,
          highlighted nodes, operation in progress, and status messages. Provides
          actions for insert, delete, search, and reset, updating state and triggering
          UI updates.
        name: bstStore
        state_shape:
        - name: nodes
          type: BSTNode[]
        - name: rootId
          type: string | null
        - name: highlightedNodeIds
          type: string[]
        - name: operation
          type: string | null
        - name: statusMessage
          type: string | null
    domains:
    - apis:
      - description: Returns the current BSTState, including all nodes and UI state.
        input: none
        method: GET
        name: getBSTState
        output: BSTState
        path: /bst/state
      - description: Returns a single BSTNode by its ID.
        input: '{ id: string }'
        method: GET
        name: getBSTNodeById
        output: BSTNode | null
        path: /bst/node/:id
      - description: Inserts a new node with the given value into the BST.
        input: '{ value: integer }'
        method: POST
        name: createBSTNode
        output: BSTNode
        path: /bst/node
      - description: Updates an existing node's value (rare, but included for CRUD
          completeness).
        input: '{ id: string, value: integer }'
        method: PUT
        name: updateBSTNode
        output: BSTNode
        path: /bst/node/:id
      - description: Deletes the node with the given value (and restructures the BST
          as needed).
        input: '{ value: integer }'
        method: DELETE
        name: deleteBSTNode
        output: BSTState
        path: /bst/node
      - description: Removes all nodes and resets the BST to its initial state.
        input: none
        method: POST
        name: resetBST
        output: BSTState
        path: /bst/reset
      - description: Searches for a node by value, returning traversal path and result.
        input: '{ value: integer }'
        method: POST
        name: searchBSTNode
        output: '{ found: boolean, path: string[], node: BSTNode | null }'
        path: /bst/search
      description: Domain representing the Binary Search Tree and its operations,
        including state, node structure, and manipulation logic.
      models:
      - description: A single node in the BST
        fields:
        - name: id
          nullable: false
          pk: true
          type: string
        - name: value
          nullable: false
          pk: false
          type: integer
        - name: left
          nullable: true
          pk: false
          type: string
        - name: right
          nullable: true
          pk: false
          type: string
        - name: parent
          nullable: true
          pk: false
          type: string
        - name: createdAt
          nullable: false
          pk: false
          type: Date
        - name: updatedAt
          nullable: false
          pk: false
          type: Date
        name: BSTNode
      - description: Structure representing the entire BST and UI state
        fields:
        - name: nodes
          nullable: false
          pk: false
          type: BSTNode[]
        - name: rootId
          nullable: true
          pk: false
          type: string
        - name: highlightedNodeIds
          nullable: false
          pk: false
          type: string[]
        - name: operation
          nullable: true
          pk: false
          type: string
        - name: statusMessage
          nullable: true
          pk: false
          type: string
        - name: createdAt
          nullable: false
          pk: false
          type: Date
        - name: updatedAt
          nullable: false
          pk: false
          type: Date
        name: BSTState
      name: bst
      services:
      - description: Contains all business logic for BST operations (insert, delete,
          search, traversal, animation triggers, validation, and status messaging).
        methods:
        - 'insert(value: integer)'
        - 'delete(value: integer)'
        - 'search(value: integer)'
        - reset()
        - getState()
        name: BSTService
    metadata:
      description: A static, client-side web application that visually demonstrates
        the operations of a Binary Search Tree (BST), including insertion, deletion,
        and search, with an emphasis on simplicity and interactivity.
      generated_at: '2024-06-10T18:09:00Z'
      name: Minimalist BST Visualizer
      version: 1.0.0
    product:
      features:
      - description: Animated SVG rendering of the BST, showing structure and changes
          with smooth transitions and highlights.
        domains:
        - bst
        id: bst_visualization
        priority: high
        title: Real-time BST Visualization
      - description: Minimalist input fields and buttons for inserting, deleting,
          searching, and resetting nodes, with validation and immediate feedback.
        domains:
        - bst
        id: interactive_controls
        priority: high
        title: Interactive Controls
      - description: Visually highlights the traversal path and result of a search
          operation, clearly indicating found or not found.
        domains:
        - bst
        id: search_animation
        priority: medium
        title: Animated Search Path
      - description: Layout and visualization adjust seamlessly to different screen
          sizes and window resizing.
        domains:
        - bst
        id: responsive_design
        priority: medium
        title: Responsive Design
      - description: Real-time feedback on operations and errors, fading automatically
          to minimize distraction.
        domains:
        - bst
        id: status_feedback
        priority: medium
        title: Status Feedback
      goals:
      - Enable users to intuitively visualize and understand BST operations
      - Provide a responsive, minimalist interface for BST manipulation and feedback
      - Deliver instant, animated, and interactive updates for all BST changes
      - Operate entirely client-side, requiring no authentication or backend
      personas:
      - description: Learns data structures and algorithms; uses the app to experiment
          and understand BST behavior visually.
        goals:
        - Understand how BSTs work
        - Experiment with insert, delete, search
        name: Student
      - description: Demonstrates BST operations during lectures or tutorials; seeks
          a simple, distraction-free visualization tool.
        goals:
        - Show BST behavior to students
        - Present clear, animated examples
        name: Educator
      - description: Quickly references BST operations for debugging or conceptual
          understanding in a clean, interactive environment.
        goals:
        - Quickly visualize BST structure
        - Test edge cases interactively
        name: Developer
      summary: A minimalist, interactive BST visualizer for the browser, supporting
        animated insertion, deletion, and search operations, rendered with SVG and
        a clean UI, requiring no backend.
    use_cases:
    - actors:
      - User
      apis:
      - createBSTNode
      description: User enters an integer and adds it to the BST; the node appears
        in the correct position with animation.
      domains:
      - bst
      happy_path:
      - User enters a valid number and clicks 'Insert'
      - Node is inserted and visualized with animation
      id: insert_node
      pages:
      - /
      postconditions:
      - BST contains the new node; visualization updates
      preconditions:
      - Number is not already present in the BST
      title: Insert Node
    - actors:
      - User
      apis:
      - deleteBSTNode
      description: User selects a node value to delete; the node is removed with a
        fade animation, and the tree restructures accordingly.
      domains:
      - bst
      happy_path:
      - User enters a valid number and clicks 'Delete'
      - Node is deleted with fade animation and tree restructures
      id: delete_node
      pages:
      - /
      postconditions:
      - BST no longer contains the node; visualization updates
      preconditions:
      - Number exists in the BST
      title: Delete Node
    - actors:
      - User
      apis:
      - searchBSTNode
      description: User enters a value to search; the app animates the traversal path,
        highlighting visited nodes and indicating if found.
      domains:
      - bst
      happy_path:
      - User enters a number and clicks 'Search'
      - Traversal path is animated, result highlighted
      id: search_node
      pages:
      - /
      postconditions:
      - Path is highlighted and result indicated; feedback message displayed
      preconditions:
      - BST is not empty
      title: Search Node
    - actors:
      - User
      apis:
      - resetBST
      description: User clears all nodes, returning the BST to the initial empty state.
      domains:
      - bst
      happy_path:
      - User clicks 'Reset'
      - BST visualization clears
      id: reset_tree
      pages:
      - /
      postconditions:
      - BST is empty; visualization resets
      preconditions:
      - BST contains at least one node
      title: Reset Tree
    user_journeys:
    - id: basic_bst_workflow
      persona: Student
      related_use_cases:
      - insert_node
      - delete_node
      - search_node
      - reset_tree
      steps:
      - action: Open the app and see an empty BST visualization and controls.
        page: /
      - action: Enter a number and click 'Insert'; node appears, tree updates.
        page: /
      - action: Insert additional numbers; tree structure grows, visualizes each step.
        page: /
      - action: Enter a value and click 'Search'; search path animates, result is
          highlighted.
        page: /
      - action: Delete a node; node fades out and tree restructures with animation.
        page: /
      - action: Reset the tree; visualization clears and status message confirms reset.
        page: /
      success_criteria: All operations provide clear, animated feedback and the BST
        visualizes correctly at each step.
      title: Basic BST Interaction Workflow
summary:
  module_names:
  - '0'
  - '1'
  - '2'
  total_modules: 3
