metadata:
  description: Comprehensive technical specification combining all individual module
    specifications
  generated_from_files:
  - tech_spec_0.yaml
  - tech_spec_1.yaml
  - tech_spec_2.yaml
  title: Combined Technical Specification
  total_modules: 3
modules:
- module_name: '0'
  source_file: tech_spec_0.yaml
  specification:
    client:
      components:
        atoms:
        - description: Standard clickable button element.
          name: Button
          props:
          - onClick
          - disabled
          - children
        - description: Single-line input field for values.
          name: Input
          props:
          - value
          - onChange
          - type
          - placeholder
        - description: Text label for inputs or elements.
          name: Label
          props:
          - children
        - description: Small pop-up for displaying node value on hover.
          name: Tooltip
          props:
          - content
          - visible
        molecules:
        - atoms:
          - Input
          - Label
          description: Input field and label for entering node values.
          name: ValueInput
          props:
          - value
          - onChange
          - isValid
        - atoms:
          - Button
          description: Button to add a node, with validation/disabled state.
          name: AddButton
          props:
          - onClick
          - disabled
        - atoms:
          - Button
          description: Button to remove a node.
          name: RemoveButton
          props:
          - onClick
          - disabled
        - atoms:
          - Button
          description: Button to undo last edit.
          name: UndoButton
          props:
          - onClick
          - disabled
        - atoms:
          - Button
          description: Button to redo reverted edit.
          name: RedoButton
          props:
          - onClick
          - disabled
        - atoms:
          - Input
          - Label
          description: Dropdown/select for traversal type (inorder, preorder, postorder).
          name: TraversalSelector
          props:
          - value
          - onChange
        - atoms:
          - Button
          description: Button to start traversal animation.
          name: StartTraversalButton
          props:
          - onClick
          - disabled
        - atoms:
          - Tooltip
          description: Displays node value on hover.
          name: NodeTooltip
          props:
          - content
          - visible
        organisms:
        - atoms: []
          description: Vertical stack of controls for editing and traversal.
          molecules:
          - ValueInput
          - AddButton
          - RemoveButton
          - UndoButton
          - RedoButton
          - TraversalSelector
          - StartTraversalButton
          name: ControlsPanel
          props: []
        - atoms: []
          description: Canvas area for rendering and animating the tree.
          molecules:
          - NodeTooltip
          name: TreeCanvasArea
          props:
          - tree
          - nodes
          - traversalStep
        - atoms:
          - Label
          description: Displays list of traversal steps with highlight.
          molecules: []
          name: TraversalStepsDisplay
          props:
          - steps
          - currentIndex
      pages:
      - description: Main interface for building, editing, and visualizing the binary
          tree.
        organisms:
        - ControlsPanel
        - TreeCanvasArea
        - TraversalStepsDisplay
        queries:
        - getTree
        - addNode
        - removeNode
        - getTraversalSteps
        route: /
        title: Binary Tree Visualizer
      stores:
      - actions:
        - addNode
        - removeNode
        - undo
        - redo
        - setTraversal
        - stepTraversal
        - resetTraversal
        description: Holds current tree structure, nodes, and editing state.
        name: treeStore
        state_shape:
        - name: tree
          type: Tree
        - name: nodes
          type: TreeNode[]
        - name: undoStack
          type: Tree[]
        - name: redoStack
          type: Tree[]
        - name: traversalSteps
          type: TraversalStep[]
        - name: currentTraversalIndex
          type: number
      - actions:
        - setInputValue
        - setIsInputValid
        - setIsAnimating
        - setShowTooltip
        - setTooltipNodeId
        description: Manages UI state (input, modals, animation).
        name: uiStore
        state_shape:
        - name: inputValue
          type: string
        - name: isInputValid
          type: boolean
        - name: isAnimating
          type: boolean
        - name: showTooltip
          type: boolean
        - name: tooltipNodeId
          type: string | null
    domains:
    - apis:
      - description: Returns the current tree and all nodes as a structured object
          for rendering.
        input: none
        method: GET
        name: getTree
        output: Tree + TreeNode[]
        path: /api/tree/get
      - description: Inserts a new integer value into the current binary tree, updating
          structure and animation state.
        input: '{ value: integer }'
        method: POST
        name: addNode
        output: Tree + TreeNode[]
        path: /api/tree/add-node
      - description: Removes a node by value from the tree and updates structure.
        input: '{ value: integer }'
        method: POST
        name: removeNode
        output: Tree + TreeNode[]
        path: /api/tree/remove-node
      - description: Returns the steps for a requested traversal type.
        input: '{ traversalType: string }'
        method: GET
        name: getTraversalSteps
        output: TraversalStep[]
        path: /api/tree/traversal-steps
      description: Represents the binary tree structure and supports all editing and
        traversal operations.
      models:
      - description: Container for the binary tree, holding reference to root node
          and overall metadata.
        fields:
        - name: id
          nullable: false
          pk: true
          type: string
        - name: rootId
          nullable: true
          pk: false
          type: string
        - name: createdAt
          nullable: false
          pk: false
          type: Date
        - name: updatedAt
          nullable: false
          pk: false
          type: Date
        name: Tree
      - description: Node in the binary tree with value and links to child nodes.
        fields:
        - name: id
          nullable: false
          pk: true
          type: string
        - name: value
          nullable: false
          pk: false
          type: integer
        - name: leftId
          nullable: true
          pk: false
          type: string
        - name: rightId
          nullable: true
          pk: false
          type: string
        - name: parentId
          nullable: true
          pk: false
          type: string
        - name: createdAt
          nullable: false
          pk: false
          type: Date
        - name: updatedAt
          nullable: false
          pk: false
          type: Date
        name: TreeNode
      - description: Represents a single step during a tree traversal.
        fields:
        - name: id
          nullable: false
          pk: true
          type: string
        - name: nodeId
          nullable: false
          pk: false
          type: string
        - name: order
          nullable: false
          pk: false
          type: integer
        - name: traversalType
          nullable: false
          pk: false
          type: string
        - name: createdAt
          nullable: false
          pk: false
          type: Date
        - name: updatedAt
          nullable: false
          pk: false
          type: Date
        name: TraversalStep
      name: tree
      services:
      - description: Business logic for binary tree operations (insertion, removal,
          traversals, undo/redo stack).
        methods:
        - addNode
        - removeNode
        - undo
        - redo
        - getTree
        - getTraversalSteps
        name: TreeService
      - description: Validates input values and prevents duplicates or invalid entries.
        methods:
        - validateValue
        name: ValidationService
    metadata:
      description: Interactive tool for creating, editing, and visualizing binary
        trees with animated rendering and traversal stepping.
      generated_at: '2024-06-10T12:00:00Z'
      name: Binary Tree Visualizer
      version: 1.0.0
    product:
      features:
      - description: Add or remove nodes using UI controls with immediate animated
          feedback.
        domains:
        - tree
        id: interactive_tree_editing
        priority: high
        title: Interactive Tree Editing
      - description: Smooth transitions and highlighting for tree changes and traversals.
        domains:
        - tree
        id: animated_visualization
        priority: high
        title: Animated Visualization
      - description: Step through inorder, preorder, and postorder traversals.
        domains:
        - tree
        id: traversal_stepping
        priority: high
        title: Traversal Stepping
      - description: Full undo/redo stack for all editing actions.
        domains:
        - tree
        id: undo_redo
        priority: high
        title: Undo/Redo
      - description: Usable on desktop and tablet devices with adaptive design.
        domains:
        - tree
        id: responsive_layout
        priority: medium
        title: Responsive Layout
      - description: Prevents duplicate and non-integer node values.
        domains:
        - tree
        id: input_validation
        priority: high
        title: Input Validation
      goals:
      - Enable users to construct and modify binary trees interactively.
      - Provide clear, animated visualizations of tree structure and traversals.
      - Offer step-by-step feedback for insertion, deletion, and traversals.
      - Ensure usability with immediate feedback and undo/redo controls.
      - Maintain a modern, accessible, and responsive UI.
      personas:
      - description: Learns data structures and algorithms; uses the visualizer to
          understand binary tree operations and traversals.
        goals:
        - Build and manipulate example trees.
        - Visually follow algorithm steps.
        name: Student
      - description: Demonstrates tree operations during lectures or tutorials.
        goals:
        - Quickly create demonstration trees.
        - Step through traversals for teaching.
        name: Educator
      - description: Tests and visualizes binary tree behaviors for algorithm prototyping.
        goals:
        - Validate complex insertion/removal cases.
        - Debug traversal logic visually.
        name: Developer
      summary: Interactive application for building, editing, and visualizing binary
        trees, featuring direct manipulation, animated feedback, and step-through
        traversals.
    use_cases:
    - actors:
      - Student
      - Educator
      - Developer
      apis:
      - addNode
      - getTree
      description: User adds nodes one by one to construct a binary tree from scratch.
      domains:
      - tree
      happy_path:
      - Enter integer value in input.
      - Click "Add" button.
      - Node is inserted if valid; tree animates update.
      id: build_tree
      pages:
      - main_visualizer
      postconditions:
      - Tree structure changes; new node appears.
      preconditions:
      - Application is loaded; tree is empty.
      title: Build a Binary Tree
    - actors:
      - Student
      - Educator
      - Developer
      apis:
      - removeNode
      - getTree
      description: User removes a selected node from the tree.
      domains:
      - tree
      happy_path:
      - Select node to remove (e.g., via context menu or UI button).
      - Confirm action.
      - Tree animates node removal and restructuring.
      id: remove_node
      pages:
      - main_visualizer
      postconditions:
      - Node is deleted; tree structure updates.
      preconditions:
      - Tree contains at least one node.
      title: Remove a Node
    - actors:
      - Student
      - Educator
      - Developer
      apis:
      - getTraversalSteps
      description: User initiates a traversal and steps through each visited node.
      domains:
      - tree
      happy_path:
      - Select traversal type (inorder, preorder, postorder).
      - Click "Start Traversal".
      - Use "Next Step" to highlight nodes in order.
      id: visualize_traversal
      pages:
      - main_visualizer
      postconditions:
      - Traversal steps highlighted; user can step forward/back.
      preconditions:
      - Tree has at least one node.
      title: Visualize Traversal
    - actors:
      - Student
      - Educator
      - Developer
      apis: []
      description: User undoes or redoes tree editing actions.
      domains:
      - tree
      happy_path:
      - Click "Undo" to revert last change.
      - Click "Redo" to reapply reverted change.
      id: undo_redo_edit
      pages:
      - main_visualizer
      postconditions:
      - Tree reflects undo/redo state.
      preconditions:
      - At least one edit has been made.
      title: Undo/Redo Edit
    user_journeys:
    - id: create_and_traverse_tree
      persona: Student
      related_use_cases:
      - build_tree
      - visualize_traversal
      - remove_node
      steps:
      - action: Enter a series of integer values and add them as nodes.
        page: /
      - action: Observe animated insertion after each addition.
        page: /
      - action: Select "Inorder Traversal" and click "Start".
        page: /
      - action: Step through highlighted nodes as traversal proceeds.
        page: /
      - action: Optionally remove a node, observe animation, and repeat traversal.
        page: /
      success_criteria: Tree created and traversal successfully visualized using animation.
      title: Create and Traverse a Tree
    - id: demonstrate_editing_and_undo
      persona: Educator
      related_use_cases:
      - build_tree
      - remove_node
      - undo_redo_edit
      steps:
      - action: Add several nodes.
        page: /
      - action: Remove a node; tree animates update.
        page: /
      - action: Click "Undo" to restore removed node.
        page: /
      - action: Click "Redo" to re-remove the node.
        page: /
      success_criteria: Undo/redo stack works as expected, with tree reverting and
        reapplying edits smoothly.
      title: Demonstrate Editing and Undo
- module_name: '1'
  source_file: tech_spec_1.yaml
  specification:
    client:
      components:
        atoms:
        - description: Clickable button for actions (add, remove, undo, redo, etc.)
          name: Button
          props:
          - label
          - onClick
          - disabled
          - icon
        - description: Input field for entering node values.
          name: Input
          props:
          - value
          - onChange
          - type
          - placeholder
          - disabled
        - description: SVG or font icon for visual cues.
          name: Icon
          props:
          - name
        - description: Displays node value on hover.
          name: Tooltip
          props:
          - content
          - children
        - description: Dropdown for traversal type selection.
          name: Select
          props:
          - options
          - value
          - onChange
        - description: Text label for inputs or sections.
          name: Label
          props:
          - text
        - description: Visual separator between sections.
          name: Divider
          props:
          - orientation
        molecules:
        - atoms:
          - Input
          - Button
          - Label
          description: Input with validation and add/remove buttons.
          name: ValueInputGroup
          props:
          - value
          - onAdd
          - onRemove
          - validationState
        - atoms:
          - Select
          description: Dropdown for selecting traversal type.
          name: TraversalTypeSelector
          props:
          - options
          - value
          - onChange
        - atoms:
          - Button
          description: Buttons for undo and redo actions.
          name: UndoRedoControls
          props:
          - canUndo
          - canRedo
          - onUndo
          - onRedo
        - atoms:
          - Label
          description: Shows current traversal sequence and highlights step.
          name: TraversalStepIndicator
          props:
          - sequence
          - currentStep
        organisms:
        - atoms:
          - Divider
          description: Panel containing all controls for manipulating the tree and
            traversals.
          molecules:
          - ValueInputGroup
          - TraversalTypeSelector
          - UndoRedoControls
          name: ControlsPanel
          props:
          - inputValue
          - onInputChange
          - onAdd
          - onRemove
          - onTraversalTypeChange
          - onStep
          - onUndo
          - onRedo
          - canUndo
          - canRedo
          - validationState
        - atoms:
          - Tooltip
          description: Canvas displaying the tree with animated transitions; tooltips
            on hover.
          molecules: []
          name: TreeCanvas
          props:
          - tree
          - hoveredNodeId
          - traversalStep
          - onNodeHover
        - atoms: []
          description: Shows the sequence of nodes in the current traversal and highlights
            the current step.
          molecules:
          - TraversalStepIndicator
          name: TraversalStepsDisplay
          props:
          - sequence
          - currentStep
      pages:
      - description: Allows users to interactively build or modify a binary tree and
          visualize structural and traversal changes.
        organisms:
        - ControlsPanel
        - TreeCanvas
        - TraversalStepsDisplay
        queries:
        - getTree
        - createNode
        - removeNode
        - traverseTree
        - undoTreeAction
        - redoTreeAction
        route: /
        title: Binary Tree Visualizer
      stores:
      - actions:
        - 'addNode(value: integer)'
        - 'removeNode(value: integer)'
        - 'setTraversalType(type: string)'
        - stepTraversal()
        - undo()
        - redo()
        - 'setInputValue(value: integer)'
        description: Manages current binary tree data, nodes, and structure.
        name: treeStore
        state_shape:
        - name: tree
          type: BinaryTree
        - name: selectedTraversal
          type: string | null
        - name: traversalSequence
          type: integer[]
        - name: traversalStep
          type: integer
        - name: undoStack
          type: BinaryTree[]
        - name: redoStack
          type: BinaryTree[]
        - name: inputValue
          type: integer | ''
        - name: validationState
          type: string | null
      - actions:
        - 'setHoveredNode(id: string | null)'
        - 'setTraversalActive(active: boolean)'
        - 'setDisabledActions(actions: string[])'
        description: Manages UI states such as which node is hovered, traversal in
          progress, and button enabled/disabled states.
        name: uiStore
        state_shape:
        - name: hoveredNodeId
          type: string | null
        - name: isTraversalActive
          type: boolean
        - name: isUndoAvailable
          type: boolean
        - name: isRedoAvailable
          type: boolean
        - name: disabledActions
          type: string[]
    domains:
    - apis:
      - description: Returns the current tree as a structured object for rendering.
        input: none
        method: GET
        name: getTree
        output: BinaryTree
        path: /tree
      - description: Add a new node with a given value to the binary tree.
        input: '{ value: integer }'
        method: POST
        name: createNode
        output: '{ node: TreeNode, tree: BinaryTree }'
        path: /tree/node
      - description: Remove a node from the binary tree by value and update the structure.
        input: '{ value: integer }'
        method: DELETE
        name: removeNode
        output: '{ tree: BinaryTree }'
        path: /tree/node
      - description: Update an existing node's value.
        input: '{ id: string, value: integer }'
        method: PATCH
        name: updateNode
        output: '{ node: TreeNode, tree: BinaryTree }'
        path: /tree/node
      - description: Delete a node from the tree by ID.
        input: '{ id: string }'
        method: DELETE
        name: deleteNode
        output: '{ tree: BinaryTree }'
        path: /tree/node/by-id
      - description: Perform a traversal (inorder, preorder, postorder) and return
          the node sequence.
        input: '{ type: string }'
        method: POST
        name: traverseTree
        output: '{ sequence: integer[] }'
        path: /tree/traverse
      - description: Undo the last editing action.
        input: none
        method: POST
        name: undoTreeAction
        output: '{ tree: BinaryTree }'
        path: /tree/undo
      - description: Redo the last undone editing action.
        input: none
        method: POST
        name: redoTreeAction
        output: '{ tree: BinaryTree }'
        path: /tree/redo
      description: Domain for representing and manipulating the binary tree and its
        nodes.
      models:
      - description: Represents a node within the binary tree.
        fields:
        - name: id
          nullable: false
          pk: true
          type: string
        - name: value
          nullable: false
          pk: false
          type: integer
        - name: left
          nullable: true
          pk: false
          type: string
        - name: right
          nullable: true
          pk: false
          type: string
        - name: parent
          nullable: true
          pk: false
          type: string
        - name: createdAt
          nullable: false
          pk: false
          type: Date
        - name: updatedAt
          nullable: false
          pk: false
          type: Date
        name: TreeNode
      - description: Represents the overall binary tree structure.
        fields:
        - name: id
          nullable: false
          pk: true
          type: string
        - name: root
          nullable: true
          pk: false
          type: string
        - name: nodes
          nullable: false
          pk: false
          type: TreeNode[]
        - name: createdAt
          nullable: false
          pk: false
          type: Date
        - name: updatedAt
          nullable: false
          pk: false
          type: Date
        name: BinaryTree
      name: tree
      services:
      - description: Handles insertion of nodes, structure validation, and animation
          triggers.
        methods:
        - 'insertNode(value: integer): { node: TreeNode, tree: BinaryTree }'
        name: treeInsertService
      - description: Handles deletion of nodes, rebalancing, and visual updates.
        methods:
        - 'removeNode(value: integer): BinaryTree'
        name: treeRemoveService
      - description: Executes inorder, preorder, and postorder traversals with stepwise
          output.
        methods:
        - 'traverse(type: string): integer[]'
        name: treeTraversalService
      - description: Maintains undo/redo stack, restores previous tree states.
        methods:
        - 'undo(): BinaryTree'
        - 'redo(): BinaryTree'
        name: treeUndoRedoService
      - description: Validates node values for uniqueness and integer type.
        methods:
        - 'validateNode(value: integer): boolean'
        name: treeValidationService
    metadata:
      description: Interactive tool for creating, editing, and visualizing binary
        trees with animated transitions and step-by-step traversals.
      generated_at: '2024-06-11T17:28:00Z'
      name: Binary Tree Visualizer
      version: 1.0.0
    product:
      features:
      - description: Real-time, animated rendering of the binary tree structure as
          users add or remove nodes.
        domains:
        - tree
        id: tree_visualization
        priority: high
        title: Animated Tree Visualization
      - description: Add or remove nodes with instant validation and feedback.
        domains:
        - tree
        id: node_management
        priority: high
        title: Node Management
      - description: Step through inorder, preorder, or postorder traversals with
          highlighted nodes.
        domains:
        - tree
        id: tree_traversal
        priority: high
        title: Traversal Animation
      - description: Revert or re-apply editing actions to the tree.
        domains:
        - tree
        id: undo_redo
        priority: medium
        title: Undo/Redo
      - description: Optimized for desktop and tablet, resizes controls and canvas
          accordingly.
        domains:
        - tree
        id: responsive_ui
        priority: medium
        title: Responsive Layout
      goals:
      - Let users intuitively create, edit, and visualize binary trees
      - Provide animated, responsive feedback for every operation
      - Support step-through traversal visualizations (inorder, preorder, postorder)
      - Enable undo/redo for editing actions
      - Ensure a modern, readable, and responsive UI
      personas:
      - description: Learns data structures and algorithms, wants to visualize binary
          trees for better understanding.
        goals:
        - Easy creation, editing, and visualization of binary trees
        - Clear visual feedback and step-by-step traversals
        name: Student
      - description: Teaches computer science concepts, uses the tool for demonstrations
          in class.
        goals:
        - Reliable, interactive canvas to show tree changes and traversals
        - Undo/redo for demonstration and correction
        name: Educator
      - description: Reviews, debugs, or experiments with tree algorithms.
        goals:
        - Fast feedback for tree operations
        - Ability to test various tree configurations
        name: Developer
      summary: Interactive tool enabling users to build, modify, and visualize binary
        trees with animated rendering and traversal stepping.
    use_cases:
    - actors:
      - Student
      - Educator
      - Developer
      apis:
      - createNode
      - getTree
      description: User enters an integer value and adds a new node to the binary
        tree if the value is unique.
      domains:
      - tree
      happy_path:
      - User enters integer into input field.
      - User clicks "Add" button.
      - The node is inserted into the correct position in the binary tree.
      - The tree canvas animates the insertion.
      id: add_node
      pages:
      - /
      postconditions:
      - Binary tree updated and rendered with the new node.
      preconditions:
      - The value is a valid integer not already in the tree.
      title: Add Node to Tree
    - actors:
      - Student
      - Educator
      - Developer
      apis:
      - removeNode
      - getTree
      description: User removes a node by entering its value and clicking "Remove".
      domains:
      - tree
      happy_path:
      - User enters integer value in input field.
      - User clicks "Remove" button.
      - The node is removed, and the tree structure is updated.
      - The canvas animates the removal and rearrangement.
      id: remove_node
      pages:
      - /
      postconditions:
      - Binary tree updated without the node.
      preconditions:
      - The value exists in the tree.
      title: Remove Node from Tree
    - actors:
      - Student
      - Educator
      - Developer
      apis:
      - traverseTree
      description: User selects a traversal type (inorder, preorder, postorder) and
        steps through each node.
      domains:
      - tree
      happy_path:
      - User selects traversal type.
      - User initiates traversal.
      - Each step highlights the current node in the canvas and displays the sequence.
      id: traverse_tree
      pages:
      - /
      postconditions:
      - User can step through the entire traversal with visual feedback.
      preconditions:
      - The tree contains at least one node.
      title: Step Through Traversal
    - actors:
      - Student
      - Educator
      - Developer
      apis:
      - undoTreeAction
      - redoTreeAction
      description: User undoes or redoes recent editing actions.
      domains:
      - tree
      happy_path:
      - User clicks "Undo" or "Redo" button.
      - The tree reverts or reapplies the last change.
      - The canvas animates the transition.
      id: undo_redo_action
      pages:
      - /
      postconditions:
      - Tree restored to previous or updated state.
      preconditions:
      - There is at least one action to undo or redo.
      title: Undo/Redo
    user_journeys:
    - id: build_and_visualize_tree
      persona: Student
      related_use_cases:
      - add_node
      - remove_node
      - traverse_tree
      - undo_redo_action
      steps:
      - action: User opens the visualizer page.
        page: /
      - action: User adds several nodes, visually confirming each insertion.
        page: /
      - action: User removes a node and watches the animated update.
        page: /
      - action: User selects inorder traversal and steps through nodes, observing
          highlights.
        page: /
      - action: User undoes and redoes the last operation to understand structural
          changes.
        page: /
      success_criteria: User can intuitively create, modify, and visualize a binary
        tree, and step through traversals with clear animated feedback.
      title: Build and Visualize a Binary Tree
    - id: demonstrate_traversal_in_class
      persona: Educator
      related_use_cases:
      - add_node
      - remove_node
      - traverse_tree
      - undo_redo_action
      steps:
      - action: Educator builds a sample tree using controls.
        page: /
      - action: Educator selects preorder traversal and steps through each node.
        page: /
      - action: Educator uses undo/redo to show different configurations and corrections.
        page: /
      - action: Students observe real-time updates and ask questions.
        page: /
      success_criteria: Class follows visual changes; traversal steps are easy to
        explain and undo/redo aids demonstration.
      title: Demonstrate Traversal in Class
- module_name: '2'
  source_file: tech_spec_2.yaml
  specification:
    client:
      components:
        atoms:
        - description: Standard button for user actions.
          name: Button
          props:
          - onClick
          - disabled
          - label
          - type
        - description: Text or number input field.
          name: Input
          props:
          - value
          - onChange
          - type
          - placeholder
        - description: Field or section label.
          name: Label
          props:
          - text
          - htmlFor
        - description: Displays info on hover, e.g., node value.
          name: Tooltip
          props:
          - content
          - children
        - description: Visual icon for actions or indicators.
          name: Icon
          props:
          - type
        - description: Loading indicator.
          name: Spinner
          props:
          - size
        molecules:
        - atoms:
          - Input
          - Button
          - Label
          description: Form for entering node values and adding/removing nodes.
          name: NodeInputForm
          props:
          - onAdd
          - onRemove
          - value
          - error
        - atoms:
          - Input
          - Label
          description: Dropdown or toggle for selecting traversal type.
          name: TraversalSelector
          props:
          - value
          - onChange
        - atoms:
          - Button
          - Icon
          description: Group of undo and redo buttons.
          name: UndoRedoButtons
          props:
          - onUndo
          - onRedo
          - undoDisabled
          - redoDisabled
        - atoms:
          - Button
          - Icon
          description: Button to clear the tree.
          name: ClearButton
          props:
          - onClear
          - disabled
        organisms:
        - atoms:
          - Tooltip
          - Spinner
          description: Renders the current tree structure as an animated SVG/canvas.
          molecules: []
          name: TreeCanvas
          props:
          - tree
          - highlightedNode
          - onNodeHover
        - atoms: []
          description: Left-column interactive panel for all controls.
          molecules:
          - NodeInputForm
          - TraversalSelector
          - UndoRedoButtons
          - ClearButton
          name: ControlsPanel
          props:
          - onAdd
          - onRemove
          - onClear
          - onUndo
          - onRedo
          - onTraversalChange
          - traversalType
          - inputValue
          - canUndo
          - canRedo
        - atoms:
          - Button
          - Label
          description: Displays current traversal steps and allows stepping through
            them.
          molecules: []
          name: TraversalStepsPanel
          props:
          - steps
          - currentStep
          - onStepNext
          - onStepPrev
      pages:
      - description: Main page for interactive binary tree editing and visualization.
        organisms:
        - ControlsPanel
        - TreeCanvas
        - TraversalStepsPanel
        queries:
        - getTree
        - clearTree
        route: /
        title: Binary Tree Visualizer
      stores:
      - actions:
        - 'addNode(value: integer)'
        - 'removeNode(value: integer)'
        - clearTree()
        - undo()
        - redo()
        - 'startTraversal(type: string)'
        - 'stepTraversal(direction: string)'
        - 'setLoading(isLoading: boolean)'
        description: Holds current tree structure, editing history for undo/redo,
          and traversal state.
        name: treeStore
        state_shape:
        - name: tree
          type: BinaryTree
        - name: undoStack
          type: BinaryTree[]
        - name: redoStack
          type: BinaryTree[]
        - name: traversalType
          type: string | null
        - name: traversalSteps
          type: integer[]
        - name: currentTraversalStep
          type: number | null
        - name: isLoading
          type: boolean
    domains:
    - apis:
      - description: Returns the current binary tree as a structured object for rendering.
        input: none
        method: GET
        name: getTree
        output: BinaryTree
        path: /api/tree
      - description: Empties the tree, resetting it to the initial empty state.
        input: none
        method: POST
        name: clearTree
        output: BinaryTree
        path: /api/tree/clear
      - description: Adds a new node with a given value to the binary tree.
        input: '{ value: integer }'
        method: POST
        name: addTreeNode
        output: BinaryTree
        path: /api/tree/add
      - description: Removes a node with the specified value from the binary tree.
        input: '{ value: integer }'
        method: POST
        name: removeTreeNode
        output: BinaryTree
        path: /api/tree/remove
      - description: Performs the selected traversal (inorder, preorder, postorder)
          and returns the step sequence.
        input: '{ type: string }'
        method: GET
        name: traverseTree
        output: '{ steps: integer[] }'
        path: /api/tree/traverse
      - description: Undoes the most recent tree editing action.
        input: none
        method: POST
        name: undoTreeEdit
        output: BinaryTree
        path: /api/tree/undo
      - description: Redoes the most recently undone tree editing action.
        input: none
        method: POST
        name: redoTreeEdit
        output: BinaryTree
        path: /api/tree/redo
      description: Domain for managing the structure and operations of a binary tree.
      models:
      - description: Represents a single node in a binary tree.
        fields:
        - name: id
          nullable: false
          pk: true
          type: string
        - name: value
          nullable: false
          pk: false
          type: integer
        - name: left
          nullable: true
          pk: false
          type: string
        - name: right
          nullable: true
          pk: false
          type: string
        name: TreeNode
      - description: Represents the entire binary tree structure.
        fields:
        - name: id
          nullable: false
          pk: true
          type: string
        - name: root
          nullable: true
          pk: false
          type: string
        - name: nodes
          nullable: false
          pk: false
          type: TreeNode[]
        name: BinaryTree
      name: tree
      services:
      - description: Validates that a value is a non-duplicate integer.
        methods:
        - 'validate(value: integer): boolean'
        name: validateNodeValue
      - description: Inserts a new TreeNode into the correct position in the binary
          tree.
        methods:
        - 'insert(value: integer): BinaryTree'
        name: insertNode
      - description: Removes a TreeNode and restructures the tree as needed.
        methods:
        - 'delete(value: integer): BinaryTree'
        name: deleteNode
      - description: Handles animation logic for node insertions, removals, and traversal
          highlights.
        methods:
        - 'animateChange(change: TreeChange): void'
        name: animateTreeTransition
      - description: Manages application state for undo and redo operations.
        methods:
        - 'undo(): BinaryTree'
        - 'redo(): BinaryTree'
        name: manageUndoRedoStack
      - description: Executes and sequences traversal steps for animation.
        methods:
        - 'traverse(type: string): integer[]'
        name: performTraversal
    metadata:
      description: Interactive tool for creating, editing, and visualizing binary
        trees with animated traversals and editing features.
      generated_at: '2024-06-09T00:00:00Z'
      name: Binary Tree Visualizer
      version: 1.0.0
    product:
      features:
      - description: Add or remove nodes, with validation and immediate visual feedback.
        domains:
        - tree
        id: interactive_editing
        priority: high
        title: Interactive Node Editing
      - description: Inorder, preorder, and postorder traversal animations, with step
          controls.
        domains:
        - tree
        id: animated_traversal
        priority: high
        title: Step-by-Step Traversals
      - description: Supports undoing and redoing node edits.
        domains:
        - tree
        id: undo_redo
        priority: medium
        title: Undo/Redo Actions
      - description: Works seamlessly on desktop and tablet devices.
        domains:
        - tree
        id: responsive_layout
        priority: medium
        title: Responsive Layout
      - description: Instantly reset the tree to its initial empty state.
        domains:
        - tree
        id: clear_tree
        priority: medium
        title: Clear Tree
      goals:
      - Enable intuitive creation and editing of binary trees
      - Provide animated visualization of tree structure and traversals
      - Support undo/redo for editing actions
      - Offer immediate and clear feedback for all user interactions
      - Ensure usability across desktop and tablet devices
      - No authentication or user-specific data persistence
      personas:
      - description: Learns about binary trees and wants to visualize and understand
          traversals interactively.
        goals:
        - Understand binary tree structure
        - Learn traversal algorithms
        - Experiment with tree edits
        name: Student
      - description: Demonstrates tree concepts and traversals in class or tutorial
          settings.
        goals:
        - Demonstrate tree operations
        - Show traversal animations
        - Create examples live
        name: Teacher
      - description: Tests and debugs binary tree logic visually for algorithm understanding.
        goals:
        - Experiment with tree construction
        - Debug traversal logic visually
        - Test edge cases
        name: Developer
      summary: Interactive, public web application enabling users to build, modify,
        and visualize binary trees with animated traversals and editing actions.
    use_cases:
    - actors:
      - Student
      - Teacher
      - Developer
      apis:
      - addTreeNode
      description: User adds a new node to the tree by entering a value; validated
        and inserted into the correct position.
      domains:
      - tree
      happy_path:
      - User enters an integer value in the input
      - User clicks "Add Node"
      - Application validates value (integer, non-duplicate)
      - Node is added to the tree with animation
      - Canvas updates to reflect new structure
      id: add_node
      pages:
      - main_visualizer
      postconditions:
      - Tree contains the new node
      preconditions:
      - Tree is loaded
      title: Add Node
    - actors:
      - Student
      - Teacher
      - Developer
      apis:
      - removeTreeNode
      description: User removes a selected node from the binary tree.
      domains:
      - tree
      happy_path:
      - User selects or enters a node value
      - User clicks "Remove Node"
      - Application validates node existence
      - Node is removed with animation
      - Tree structure updates visually
      id: remove_node
      pages:
      - main_visualizer
      postconditions:
      - Node is removed and tree is rebalanced if needed
      preconditions:
      - Tree contains at least one node
      title: Remove Node
    - actors:
      - Student
      - Teacher
      - Developer
      apis:
      - clearTree
      description: User clears the entire tree, resetting to empty.
      domains:
      - tree
      happy_path:
      - User clicks "Clear Tree" button
      - If tree is not empty, tree is cleared and canvas resets with animation
      - '"Clear" button disables if tree is empty'
      id: clear_tree
      pages:
      - main_visualizer
      postconditions:
      - Tree is empty
      preconditions:
      - Tree is not empty
      title: Clear Tree
    - actors:
      - Student
      - Teacher
      - Developer
      apis:
      - traverseTree
      description: User selects and steps through a tree traversal (inorder, preorder,
        postorder).
      domains:
      - tree
      happy_path:
      - User selects traversal type
      - User clicks "Start Traversal"
      - Application animates node highlights step by step
      - User can step forward/backward or stop traversal
      - Traversal steps are shown below the canvas
      id: animate_traversal
      pages:
      - main_visualizer
      postconditions:
      - Traversal steps are shown and highlighted on canvas
      preconditions:
      - Tree contains at least one node
      title: Animate Traversal
    - actors:
      - Student
      - Teacher
      - Developer
      apis:
      - undoTreeEdit
      - redoTreeEdit
      description: User undoes or redoes recent editing actions (add/remove/clear).
      domains:
      - tree
      happy_path:
      - User clicks "Undo" or "Redo"
      - Previous/next tree state is restored and visualized with animation
      - Undo/Redo stack updates accordingly
      id: undo_redo
      pages:
      - main_visualizer
      postconditions:
      - Previous or next tree state is restored
      preconditions:
      - There is at least one action to undo or redo
      title: Undo/Redo Edit
    user_journeys:
    - id: build_and_traverse
      persona: Student
      related_use_cases:
      - add_node
      - remove_node
      - undo_redo
      - animate_traversal
      - clear_tree
      steps:
      - action: Open app (main visualizer page loads)
        page: main_visualizer
      - action: Add several nodes via controls
        page: main_visualizer
      - action: Remove an incorrect node
        page: main_visualizer
      - action: Undo and redo actions
        page: main_visualizer
      - action: Select "Inorder Traversal" and step through animation
        page: main_visualizer
      - action: Clear the tree and start over
        page: main_visualizer
      success_criteria: User visually understands tree structure and traversals; all
        actions provide immediate, animated feedback; undo/redo and clearing work
        reliably.
      title: Build and Traverse a Binary Tree
summary:
  module_names:
  - '0'
  - '1'
  - '2'
  total_modules: 3
