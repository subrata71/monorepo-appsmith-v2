/**
 * ⚠️  AUTO-GENERATED FILE - DO NOT MODIFY ⚠️
 *
 * This file is automatically generated from OpenAPI specifications.
 *
 * To regenerate this file after updating OpenAPI specs:
 * 1. Update your OpenAPI specification files in open-api-specs/
 * 2. Run: cd shared && pnpm generate-types
 *
 * This ensures type safety between your API contracts and TypeScript code.
 */

export interface paths {
    "/__entityPlural__": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all entities
         * @description Retrieve a list of all entities
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of entities retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["__Entity__"][];
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new entity
         * @description Create a new entity with the provided data
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["New__Entity__"];
                };
            };
            responses: {
                /** @description Entity created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["__Entity__"];
                        };
                    };
                };
                /** @description Bad request - invalid data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/__entityPlural__/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The entity ID */
                id: string;
            };
            cookie?: never;
        };
        /**
         * Get entity by ID
         * @description Retrieve a specific entity by its ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The entity ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Entity retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["__Entity__"];
                        };
                    };
                };
                /** @description Entity not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        /**
         * Update entity
         * @description Update an existing entity with the provided data
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The entity ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name?: string;
                    };
                };
            };
            responses: {
                /** @description Entity updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["__Entity__"];
                        };
                    };
                };
                /** @description Bad request - invalid data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Entity not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete entity
         * @description Delete an entity by its ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The entity ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Entity deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Entity not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quizzes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The quiz ID */
                id: string;
            };
            cookie?: never;
        };
        /**
         * Get quiz by ID
         * @description Get quiz details and questions by quiz ID.
         */
        get: operations["getQuizById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quiz-attempts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create quiz attempt
         * @description Start a new quiz attempt for a user session.
         */
        post: operations["createQuizAttempt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quiz-attempts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The quiz attempt ID */
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Update quiz attempt
         * @description Update a quiz attempt with answers and progress.
         */
        put: operations["updateQuizAttempt"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiErrorResponse: {
            error: {
                message: string;
                code?: string;
                details?: Record<string, never>;
            };
        };
        __Entity__: {
            /** Format: uuid */
            id: string;
            name: string;
            /** Format: date-time */
            createdAt: string;
        };
        New__Entity__: {
            name: string;
        };
        Quiz: {
            /**
             * Format: uuid
             * @description Unique identifier for the quiz
             */
            id: string;
            /** @description The title of the quiz */
            title: string;
            /** @description Instructions for taking the quiz */
            instructions?: string | null;
            /** @description List of questions in the quiz */
            questions: components["schemas"]["Question"][];
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updatedAt: string;
        };
        Question: {
            /**
             * Format: uuid
             * @description Unique identifier for the question
             */
            id: string;
            /**
             * Format: uuid
             * @description The quiz this question belongs to
             */
            quizId: string;
            /** @description The question text */
            text: string;
            /** @description List of answer options */
            options: components["schemas"]["Option"][];
            /**
             * Format: uuid
             * @description The ID of the correct answer option
             */
            correctOptionId: string;
            /** @description The order of this question in the quiz */
            order: number;
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updatedAt: string;
        };
        Option: {
            /**
             * Format: uuid
             * @description Unique identifier for the option
             */
            id: string;
            /**
             * Format: uuid
             * @description The question this option belongs to
             */
            questionId: string;
            /** @description The option text */
            text: string;
        };
        QuizAttempt: {
            /**
             * Format: uuid
             * @description Unique identifier for the quiz attempt
             */
            id: string;
            /**
             * Format: uuid
             * @description The quiz this attempt is for
             */
            quizId: string;
            /** @description List of answers provided in this attempt */
            answers: components["schemas"]["Answer"][];
            /** @description Score achieved in this attempt */
            score: number;
            /** @description Whether the quiz attempt is completed */
            completed: boolean;
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updatedAt: string;
        };
        Answer: {
            /**
             * Format: uuid
             * @description Unique identifier for the answer
             */
            id: string;
            /**
             * Format: uuid
             * @description The question this answer is for
             */
            questionId: string;
            /**
             * Format: uuid
             * @description The selected answer option
             */
            selectedOptionId: string;
            /** @description Whether this answer is correct */
            isCorrect: boolean;
        };
        NewQuizAttempt: {
            /**
             * Format: uuid
             * @description The quiz to start an attempt for
             */
            quizId: string;
        };
        UpdateQuizAttempt: {
            /** @description Answers to update */
            answers?: components["schemas"]["NewAnswer"][];
            /** @description Whether to mark the attempt as completed */
            completed?: boolean;
        };
        NewAnswer: {
            /**
             * Format: uuid
             * @description The question this answer is for
             */
            questionId: string;
            /**
             * Format: uuid
             * @description The selected answer option
             */
            selectedOptionId: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getQuizById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The quiz ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Quiz retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Quiz"];
                    };
                };
            };
            /** @description Quiz not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
        };
    };
    createQuizAttempt: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NewQuizAttempt"];
            };
        };
        responses: {
            /** @description Quiz attempt created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["QuizAttempt"];
                    };
                };
            };
            /** @description Bad request - invalid data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Quiz not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
        };
    };
    updateQuizAttempt: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The quiz attempt ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateQuizAttempt"];
            };
        };
        responses: {
            /** @description Quiz attempt updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["QuizAttempt"];
                    };
                };
            };
            /** @description Bad request - invalid data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Quiz attempt not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
        };
    };
}
