client:
  components:
    entities:
    - description: Renders a single TODO with completion state and delete button.
      entity: todo
      name: TodoItem
      props:
      - todo
      - onToggle
      - onDelete
    features:
    - description: Input and button for adding new TODOs, with validation.
      entities: []
      feature: add_todo
      name: AddTodoForm
      props:
      - onAdd
      shared:
      - Input
      - Button
    - description: Lists all TODOs, handles toggling and deleting.
      entities:
      - TodoItem
      feature: todo_list
      name: TodoList
      props:
      - todos
      - onToggle
      - onDelete
      shared: []
    shared:
    - category: ui
      description: Stylized button for actions (add, delete).
      name: Button
      props:
      - children
      - onClick
      - type
      - aria-label
    - category: ui
      description: Stylized text input.
      name: Input
      props:
      - value
      - onChange
      - onKeyDown
      - placeholder
    - category: ui
      description: Centered card container for visual structure.
      name: Card
      props:
      - children
    widgets:
    - description: Main card layout containing form and list.
      entities: []
      features:
      - AddTodoForm
      - TodoList
      name: TodoAppCard
      props: []
      shared:
      - Card
  pages:
  - description: Main interface for managing TODOs; includes input, list, and controls.
    queries:
    - getTodos
    - addTodo
    - toggleTodo
    - deleteTodo
    route: /
    title: Minimalist TODO
    widgets:
    - TodoAppCard
  stores:
  - actions:
    - getTodos
    - addTodo
    - toggleTodo
    - deleteTodo
    description: Manages the in-memory array of TODOs and CRUD operations; triggers
      UI updates on change.
    layer: entities
    name: todoStore
    state_shape:
    - name: todos
      type: Todo[]
components:
  parameters: []
  responses: []
  schemas:
  - name: Todo
    type: object
domains:
- apis:
  - method: GET
    operation:
      description: Returns the current array of TODO items from in-memory storage.
      operation_id: getTodos
      summary: Get all TODO items
      tags:
      - todo
    path: /todos
  - method: POST
    operation:
      description: Adds a new TODO object to the in-memory array and triggers list
        update.
      operation_id: addTodo
      summary: Add TODO
      tags:
      - todo
    path: /todos
  - method: PATCH
    operation:
      description: Toggles the 'completed' state of a TODO item by ID.
      operation_id: toggleTodo
      summary: Toggle TODO
      tags:
      - todo
    path: /todos/{id}/toggle
  - method: DELETE
    operation:
      description: Removes a TODO item from the array by ID.
      operation_id: deleteTodo
      summary: Delete TODO
      tags:
      - todo
    path: /todos/{id}
  description: Domain for managing in-memory TODO items and related operations in
    the client.
  models:
  - description: Represents a single TODO item in memory.
    fields:
    - name: id
      nullable: false
      pk: true
      type: string
    - name: text
      nullable: false
      pk: false
      type: string
    - name: completed
      nullable: false
      pk: false
      type: boolean
    - name: createdAt
      nullable: false
      pk: false
      type: string
    - name: updatedAt
      nullable: false
      pk: false
      type: string
    name: Todo
  name: todo
  services:
  - description: Handles in-memory CRUD operations for TODO items, including add,
      toggle, and delete.
    methods:
    - getTodos
    - addTodo
    - toggleTodo
    - deleteTodo
    name: TodoService
metadata:
  description: Differential technical specification for a single-page frontend-only
    TODO app with in-memory task management, no persistence, and no authentication.
  generated_at: '2024-06-13T07:30:00Z'
  name: Minimalist TODO App UI
  version: 1.0.0
product:
  features:
  - description: Instantly add a new TODO item to the list via input and button or
      Enter key.
    domains:
    - todo
    id: add_todo
    priority: high
    title: Add TODO
  - description: Mark TODOs as complete/incomplete by clicking the item or a checkbox.
    domains:
    - todo
    id: toggle_todo
    priority: high
    title: Toggle TODO Completion
  - description: Remove a TODO item from the list with a single click/tap.
    domains:
    - todo
    id: delete_todo
    priority: medium
    title: Delete TODO
  - description: Seamless experience across desktop and mobile devices.
    domains: []
    id: responsive_ui
    priority: high
    title: Responsive UI
  goals:
  - Enable users to quickly add, complete, and remove tasks with instant feedback.
  - Provide a distraction-free, responsive, and accessible experience.
  - Deliver a lightweight, client-only HTML file with no backend or authentication.
  personas:
  - description: Needs a fast, clutter-free way to jot down and check off tasks throughout
      the day.
    goals: []
    name: Busy Individual
  - description: Prefers simple, elegant interfaces without unnecessary features or
      distractions.
    goals: []
    name: Minimalist User
  - description: Wants to manage quick tasks on-the-go with a responsive, touch-friendly
      UI.
    goals: []
    name: Mobile User
  summary: A minimalist single-page TODO application with in-memory task management,
    instant UI updates, and a clean, modern interface.
use_cases:
- actors:
  - User
  apis:
  - addTodo
  description: User enters a task and adds it to the list. Input is validated and
    cleared on success.
  domains:
  - todo
  happy_path:
  - User types task text in the input.
  - User clicks 'Add' or presses Enter.
  - If input is non-empty, task is added to the list and input is cleared.
  id: add_task
  pages:
  - /
  postconditions: []
  preconditions: []
  title: Add Task
- actors:
  - User
  apis:
  - toggleTodo
  description: User toggles the completion state of a task by clicking it or its checkbox.
  domains:
  - todo
  happy_path:
  - User clicks a task row or checkbox.
  - Task's completed state is toggled and the UI updates (strike-through/fade).
  id: toggle_task
  pages:
  - /
  postconditions: []
  preconditions: []
  title: Toggle Task Completion
- actors:
  - User
  apis:
  - deleteTodo
  description: User removes a task from the list instantly.
  domains:
  - todo
  happy_path:
  - User clicks the delete icon/button for a task.
  - Task is removed from the in-memory list and UI updates.
  id: delete_task
  pages:
  - /
  postconditions: []
  preconditions: []
  title: Delete Task
user_journeys:
- id: quick_task_management
  persona: Busy Individual
  related_use_cases:
  - add_task
  - toggle_task
  - delete_task
  steps:
  - action: User opens the HTML file; sees an empty TODO list.
    page: /
  - action: User enters "Buy milk" and presses Enter; task appears.
    page: /
  - action: User adds "Email project update" with Add button; both tasks are listed.
    page: /
  - action: User taps "Buy milk" to mark it completed (strike-through).
    page: /
  - action: User deletes "Email project update".
    page: /
  - action: User closes or refreshes page; all tasks are gone.
    page: /
  success_criteria: All actions are instant, visual feedback is clear, and no data
    is persisted after refresh.
  title: Quick Task Management
