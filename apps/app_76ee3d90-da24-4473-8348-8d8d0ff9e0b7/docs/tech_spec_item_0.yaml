client:
  components:
    entities:
    - description: Displays a single item with status and a 'mark as done' control/button.
      entity: item
      name: ItemCard
      props:
      - item
      - onMarkDone
    features:
    - description: Feature component that triggers markItemDone mutation and toast
        display.
      entities:
      - ItemCard
      feature: markItemDone
      name: MarkItemDoneButton
      props:
      - itemId
      shared:
      - Button
    - description: Manages toast state, stacking, auto-dismiss, and manual close.
      entities: []
      feature: showToast
      name: ToastManager
      props: []
      shared:
      - Toast
      - ToastStack
    shared:
    - category: ui
      description: Visual component for a single toast notification, styled per design
        system.
      name: Toast
      props:
      - message
      - type
      - onClose
    - category: ui
      description: Handles stacking and rendering of up to 3 toasts in the correct
        overlay position.
      name: ToastStack
      props:
      - toasts
    - category: ui
      description: Standard button component, reused throughout the UI.
      name: Button
      props:
      - label
      - onClick
    - category: ui
      description: Standard icon component, supporting success and close icons.
      name: Icon
      props:
      - name
    widgets:
    - description: Widget combining a list of ItemCards with mark as done and toast
        functionality.
      entities:
      - ItemCard
      features:
      - MarkItemDoneButton
      name: ItemList
      props:
      - items
      shared: []
  pages:
  - description: Allows users to view their items and mark them as done with immediate
      feedback via toast notification.
    queries:
    - markItemDone
    - getItems
    route: /items
    title: Items List
    widgets:
    - ItemList
    - ToastStack
  stores:
  - actions:
    - fetchItems
    - markItemDone
    description: State management for items, supports loading, updating, and marking
      done.
    layer: entities
    name: itemsStore
    state_shape:
    - name: items
      type: Item[]
    - name: loading
      type: boolean
  - actions:
    - showToast
    - dismissToast
    description: State management for toast notifications, stacking, auto-dismiss,
      and manual close.
    layer: shared
    name: toastStore
    state_shape:
    - name: toasts
      type: Toast[]
components:
  parameters:
  - in_: path
    name: id
    required: true
  responses:
  - code: '200'
    description: Success
  - code: '400'
    description: Bad request
  - code: '404'
    description: Not found
  - code: '500'
    description: Internal server error
  schemas:
  - name: Item
    type: object
  - name: Toast
    type: object
domains:
- apis:
  - method: POST
    operation:
      description: Updates the status of an item to 'done'.
      operation_id: markItemDone
      summary: Mark an item as done
      tags:
      - Item
    path: /api/items/{id}/markDone
  - method: GET
    operation:
      description: Fetches the list of items and their statuses.
      operation_id: getItems
      summary: Get items list
      tags:
      - Item
    path: /api/items
  description: Represents actionable items that users can mark as done, and supports
    backend operations for updating item state.
  models:
  - description: A single actionable item in the system.
    fields:
    - name: id
      nullable: false
      pk: true
      type: string
    - name: title
      nullable: false
      pk: false
      type: string
    - name: status
      nullable: false
      pk: false
      type: string
    - name: createdAt
      nullable: false
      pk: false
      type: string
    - name: updatedAt
      nullable: false
      pk: false
      type: string
    name: Item
  name: item
  services:
  - description: Business logic for managing items, including marking as done.
    methods:
    - markItemDone
    - getItems
    name: ItemService
- apis: []
  description: Provides client-side logic and UI for displaying stacked, non-blocking
    toast notifications.
  models:
  - description: A single toast notification in the UI.
    fields:
    - name: id
      nullable: false
      pk: true
      type: string
    - name: message
      nullable: false
      pk: false
      type: string
    - name: type
      nullable: false
      pk: false
      type: string
    - name: createdAt
      nullable: false
      pk: false
      type: string
    - name: duration
      nullable: false
      pk: false
      type: integer
    name: Toast
  name: toast
  services:
  - description: Provides methods to show, stack, and dismiss toast notifications.
      Manages stacking up to 3 concurrent toasts, with auto-dismiss and manual close
      support.
    methods:
    - showToast
    - dismissToast
    - stackToasts
    name: ToastService
metadata:
  description: Show a toast notification to the user when they mark an item as done,
    providing immediate feedback and confirmation. Toasts follow the design system,
    stack up to 3, and auto-dismiss or allow manual dismissal.
  generated_at: '2024-06-10T10:00:00Z'
  name: Add toast message when item is marked as done
  version: 1.0.0
product:
  features:
  - description: When a user marks an item as done, a toast notification is displayed
      for confirmation.
    domains:
    - item
    - toast
    id: toast_notification_on_item_done
    priority: high
    title: Toast Notification on Mark Done
  goals:
  - Improve user experience with instant visual confirmation when marking an item
    as done.
  - Ensure toasts use the design system and do not interrupt user flow.
  - Allow stacking and dismissal of multiple toasts.
  personas:
  - description: Any logged-in user who can view and mark items as done.
    goals:
    - Manage and complete items efficiently.
    - Receive clear, unobtrusive feedback after actions.
    name: Authenticated User
  summary: Provides immediate, non-blocking feedback to users when they mark an item
    as done, through visually consistent toast notifications.
use_cases:
- actors:
  - Authenticated User
  apis:
  - markItemDone
  description: When a user marks an item as done, the UI shows a toast confirming
    the action. Toasts stack and auto-dismiss. The user can continue working without
    interruption.
  domains:
  - item
  - toast
  happy_path:
  - User clicks 'mark as done' button or checkbox.
  - UI sends 'markItemDone' request to backend.
  - Item is visually updated to 'done' state in UI.
  - On success, toast notification appears with confirmation message.
  - Toast auto-dismisses after 3 seconds or can be closed by user.
  - If multiple items are marked quickly, up to 3 toasts stack; older toasts fade
    out.
  id: mark_item_done_with_toast
  pages:
  - /items
  postconditions:
  - Item is marked as done in backend and frontend.
  - User receives clear confirmation.
  preconditions:
  - User is authenticated.
  - Item is displayed in the items list.
  title: Mark item as done with toast feedback
user_journeys:
- id: items_page_toast_journey
  persona: Authenticated User
  related_use_cases:
  - mark_item_done_with_toast
  steps:
  - action: User visits Items List page.
    page: /items
  - action: User identifies an item to mark as done.
    page: /items
  - action: User clicks 'mark as done' control.
    page: /items
  - action: Item state updates to done immediately in UI.
    page: /items
  - action: Toast notification pops up in bottom right corner confirming action.
    page: /items
  - action: User marks additional items; up to 3 toasts stack.
    page: /items
  - action: Toasts auto-dismiss after 3 seconds or user closes them.
    page: /items
  - action: User continues managing items without interruption.
    page: /items
  success_criteria: Each mark as done action results in a clear, non-blocking toast
    confirmation. No blocking or interruption occurs.
  title: Marking Items as Done with Toast Feedback
